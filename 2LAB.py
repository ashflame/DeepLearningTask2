# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bczCvELghEH_TXU_eeV_xTdT2JdAF7z-
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
# %matplotlib inline

import sys
sys.path.append("..")

from __future__ import division, print_function, absolute_import
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("MNIST_data/", one_hot=True)

x = tf.placeholder(tf.float32, [None, 784])
W = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))
y = tf.nn.softmax(tf.matmul(x, W) + b)
y_ = tf.placeholder(tf.float32, [None, 10])

cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_*tf.log(y), reduction_indices=[1]))

train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

init = tf.global_variables_initializer()

sess = tf.Session()
sess.run(init)

for i in range(1000):
	batch_xs, batch_ys = mnist.train.next_batch(100)
	sess.run (train_step, feed_dict={x : batch_xs, y_: batch_ys})

correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(y_,1))

accuracy = tf.reduce_mean(tf.cast(correct_prediction , tf.float32))

print("Точность: %s" %sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))

W_relu = tf.Variable (tf.truncated_normal([784 , 100 ], stddev = 0.1 ))
b_relu = tf.Variable (tf.truncated_normal([100], stddev = 0.1 ))

h = tf.nn.relu(tf.matmul(x, W_relu) + b_relu)

keep_probability = tf.placeholder(tf.float32)

h_drop = tf.nn.dropout(h , keep_probability)

W = tf.Variable(tf.zeros([100,10]))
b = tf.Variable(tf.zeros([10]))
у = tf.nn.softmax(tf.matmul(h_drop,W) + b)

for i in range(2000):
  batch_xs, batch_ys = mnist.train.next_batch(100)
  sess.run(train_step,feed_dict= {x : batch_xs, y_: batch_ys, keep_probability : 0.5 })

print("Точность: %s" % sess.run (accuracy, feed_dict = {x: mnist.test.images , y_: mnist.test.labels , keep_probability : 1.}))

logit = tf.matmul(h_drop,W) + b

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits =logit, labels = y_))

for i in range (10000):
	batch_xs, batch_ys = mnist.train.next_batch(100)
	sess.run(train_step, feed_dict={
		x: batch_xs, y_: batch_ys, keep_probability : 0.5 } )
print ( "Точность: %s" %
	sess.run(accuracy, feed_dict = {
		x:mnist.test.images, y_:mnist.test.labels, keep_probability : 1. }))